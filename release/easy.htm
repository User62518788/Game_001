<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width,user-scalable=no">
        <style>
            * {
                user-select: none;
            }
            body {
                background-color: black;
                margin: 0;
            }
            #fullscreen-button {
                position: absolute;
                left: 0;
                right: 0;
                top: 0;
                bottom: 0;
                font-size: 16px;
                background-color: rgb(255, 255, 255);
                width: auto;
                height: 20%;
                border: 1px solid black;
                border-radius: 10px;
                margin: auto;
                aspect-ratio: 3 / 2;
                z-index: 1;
            }
            #fullscreen-button:hover {
                background-color: black;
                color: white;
                height: 22%;
                font-size: 20px;
            }
            #score {
                color: white;
                position: absolute;
                top: 0;            
            }
            #viewport {
                height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            #game-container {
                /*Color*/
                background-color: white;
                /*Size*/
                aspect-ratio: 1 / 2;
                width: auto;
                height: 90%;
                /*Flexbox*/
                display: flex;
                flex-direction: column;
                align-content: flex-start;
                justify-content: space-between;
                flex-flow: flow;
            }
            #lines {
                display: flex;
                flex-direction: row;
                height: calc(100% - 60px);
            }
            #lines div {
                width: 25%;
                border: 1px solid black;
                position: relative;
            }
            #lines div div {
                width: 100%;
                height: 14px;
                background-color: rgba(0, 68, 255, 0.822);
                position: absolute;
                border: 0;
                top: 0px;
            }
            #hit-line {
                background-color: yellow;
                width: 100%;
                height: 80px;
                border: 0;
                border-top: 0;
                border-bottom: 0;
                display: flex;
            }
            #hit-line button {
                width: 25%;
                height: 100%;
                margin: 0;
                padding: 0;
                border: 1px solid black;
                font-size: 20px;
                background-color: rgba(0, 0, 0, 0);
            }
        </style>
    </head>
    <body>
        <button id="fullscreen-button" onclick="fullscreen();">Play</button>
        <div id="viewport">
            <div id="score">Score: 0</div>
            <div id="game-container">
                <div id="lines">
                    <div id="1"></div>
                    <div id="2"></div>
                    <div id="3"></div>
                    <div id="4"></div>
                </div>
                <div id="hit-line">
                    <button ontouchstart="blockRemover.remove(1);">A</button>
                    <button ontouchstart="blockRemover.remove(2);"">S</button>
                    <button ontouchstart="blockRemover.remove(3);"">L</button>
                    <button ontouchstart="blockRemover.remove(4);"">;</button>
                </div>
            </div>
        </div>

        <script>
            let falling_speed = 12;

            let fullscreen_button = document.getElementById("fullscreen-button");
            let viewport_container = document.getElementById("viewport");
            let game_container = document.getElementById("game-container");
            let score_container = document.getElementById("score");

            let block = document.getElementById("block");
            let offset = falling_speed;
            let isFullscreen = false;
            let lineOffset;
            let score = 0;

            let blocksList = [];
            let line1Blocks = [];
            let line2Blocks = [];
            let line3Blocks = [];
            let line4Blocks = [];

            let blockRemover = {
                remove: (line) => {
                    switch (line) {
                    case 1: 
                        try {
                            blockObj = line1Blocks.shift();
                            removeItemFromArray(line1Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                    case 2: 
                        try {
                            blockObj = line2Blocks.shift();
                            removeItemFromArray(line2Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                    case 3: 
                        try {
                            blockObj = line3Blocks.shift();
                            removeItemFromArray(line3Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                    case 4:
                        try {
                            blockObj = line4Blocks.shift();
                            removeItemFromArray(line4Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                    }
                }
            }

            function getLineOffset() {
                let viewportHeight = window.innerHeight;
                return viewportHeight * 0.9 - 14 - 80;
            }

            function blockUpdate() {
                
                //setTimeout(() => {
                    
                    if (isFullscreen == true) {
                        blocksList.forEach(obj => {
                            obj.update();
                            obj.checkSelfDestroy();
                        });

                        requestAnimationFrame(blockUpdate);
                    }
                //}, 1000 / fps);
                
            }

            function fullscreen() {
                viewport_container.requestFullscreen();
                screen.orientation.lock("portrait").catch();
            }

            function gameContainerInit() {
                game_container.style.height = (viewport_container.offsetHeight * 0.9) + "px";
            }

            function getRandomFloat(min, max) {
                return Math.random() * (max - min) + min;
            }

            function getRandomInt(min, max) {
                const minCeiled = Math.ceil(min);
                const maxFloored = Math.floor(max);
                return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled);
            }
            
            function removeItemFromArray(array, item) {
                let index = array.indexOf(item);

                if (index > -1) {
                    array.splice(index, 1);
                }
            }

            function createBlock() {
                let newBlock = document.createElement("div");
                let line = getRandomInt(1, 5);
                let insertLine = document.getElementById(line);

                newBlock.className = "block";
                insertLine.appendChild(newBlock);

                let newBlockObj = {
                    element: undefined,
                    topValue: 0,
                    line: undefined,
                    destroy: () => {
                        removeItemFromArray(blocksList, newBlockObj);

                        switch (newBlockObj.line) {
                            case 1: 
                                removeItemFromArray(line1Blocks, newBlockObj);
                                break;
                            case 2: 
                                removeItemFromArray(line2Blocks, newBlockObj);
                                break;
                            case 3: 
                                removeItemFromArray(line3Blocks, newBlockObj);
                                break;
                            case 4: 
                                removeItemFromArray(line4Blocks, newBlockObj);
                                break;
                        }

                        newBlockObj.element.remove();
                    },
                    checkSelfDestroy: () => {
                        if (newBlockObj.topValue > (lineOffset + 94)) {
                            newBlockObj.destroy();
                            score -= 1;
                            score_container.innerHTML = "Score: " + score;
                        }
                    },
                    update: () => {
                        let styleTop = window.getComputedStyle(newBlockObj.element).getPropertyValue("top");
                        let topOffset = parseFloat(styleTop.split("px")[0]);
                        let newValue = topOffset + offset;

                        newBlockObj.element.style.top = newValue + "px";
                        newBlockObj.topValue = newValue;

                        newBlockObj.element.style.top = newBlockObj.topValue;
                    }
                };
                newBlockObj.element = newBlock;
                newBlockObj.line = line;
                blocksList.push(newBlockObj);

                switch (line) {
                    case 1:
                        line1Blocks.push(newBlockObj);
                        break;
                    case 2:
                        line2Blocks.push(newBlockObj);
                        break;
                    case 3: 
                        line3Blocks.push(newBlockObj);
                        break;
                    case 4: 
                        line4Blocks.push(newBlockObj);
                        break;
                }
            }

            function createBlockUpdate() {
                setTimeout(() => {
                    if (isFullscreen == true) {
                        createBlock();
                        createBlockUpdate();
                    }
                }, getRandomFloat(0.3, 0.5) * 1000);
            }

            function update() {
                blockUpdate();
                createBlockUpdate();
            }

            viewport_container.addEventListener("fullscreenchange", () => {
                if (isFullscreen == false) {
                    isFullscreen = true;

                    setTimeout(() => {
                        lineOffset = getLineOffset();
                        console.log(lineOffset);
                        update();
                    }, 1000)
                } else {
                    isFullscreen = false;
                }
            });

            

            window.addEventListener("keydown", (event) => {
                const keyCode = event.code;
                let blockObj;
                
                switch (keyCode) {
                    case "KeyA": 
                        blockRemover.remove(1);
                        
                        break;
                    case "KeyS": 
                        try {
                            blockObj = line2Blocks.shift();
                            removeItemFromArray(line2Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                    case "KeyL": 
                        try {
                            blockObj = line3Blocks.shift();
                            removeItemFromArray(line3Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                    case "Semicolon":
                        try {
                            blockObj = line4Blocks.shift();
                            removeItemFromArray(line4Blocks, blockObj);
                            blockObj.destroy();
                            score += 1;
                            score_container.innerHTML = "Score: " + score;
                        } catch {
                            console.log("No target.");
                        }
                        
                        break;
                }
            }, true);
            
            console.log(lineOffset)
        </script>
    </body>
    
</html>